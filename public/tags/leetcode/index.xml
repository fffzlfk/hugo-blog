<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/leetcode/</link>
    <description>Recent content in LeetCode on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 27 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode杂题</title>
      <link>https://fffzlfk.gitlab.io/2020/07/27/leetcode/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2020/07/27/leetcode/</guid>
      <description>AC代码 &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;bool&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;isPathCrossing&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(&amp;lt;span class=&amp;quot;hljs-built_in&amp;quot;&amp;gt;string&amp;lt;/span&amp;gt; path)&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;{M[make_pair(&amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;)] = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; x = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;, y = &amp;lt;span class=&amp;quot;hljs-number&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;for&amp;lt;/span&amp;gt; (&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;auto&amp;lt;/span&amp;gt; i : path) {&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (i == &amp;lt;span class=&amp;quot;hljs-string&amp;quot;&amp;gt;&#39;N&#39;&amp;lt;/span&amp;gt;) {x--;} &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(i == &#39;S&#39;)&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;{x++;} &amp;lt;span class=&amp;quot;hljs-function&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-title&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-params&amp;quot;&amp;gt;(i == &#39;W&#39;)&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;{y--;} &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;else&amp;lt;/span&amp;gt; y++;&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;if&amp;lt;/span&amp;gt; (M[make_pair(x, y)]) &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;M[make_pair(x, y)] = &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;true&amp;lt;/span&amp;gt;;}&amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;hljs-keyword&amp;quot;&amp;gt;false&amp;lt;/span&amp;gt;;} };AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 AC代码 面试题-二分 求波动数组[1, 3, 5, 7, 9, 11, 13, 8, 1]中的最大值。</description>
    </item>
    
    <item>
      <title>LeetCode第29场双周赛</title>
      <link>https://fffzlfk.gitlab.io/2020/06/28/leetcode29/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2020/06/28/leetcode29/</guid>
      <description>题目描述 给你一个整数数组 salary ，数组里每个数都是 唯一 的，其中 salary[i] 是第 i 个员工的工资。 请你返回去掉最低工资和最高工资以后，剩下员工工资的平均值。
AC代码 class Solution { public: double average(vector&amp;lt;int&amp;gt;&amp;amp; salary) { int Max = *max_element(salary.begin(), salary.end()); int Min = *min_element(salary.begin(), salary.end()); int s = 0, cnt = 0; for (auto i : salary) if (i != Max &amp;amp;&amp;amp; i != Min) s += i, cnt++; return (double)s/(cnt); } }; 题目描述 给你两个正整数 n 和 k 。
如果正整数 i 满足 n % i == 0 ，那么我们就说正整数 i 是整数 n 的因子。</description>
    </item>
    
    <item>
      <title>LeetCode-50 &amp; LeetCode-34</title>
      <link>https://fffzlfk.gitlab.io/2019/11/23/leetcode-50/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/23/leetcode-50/</guid>
      <description>LeetCode-50-Pow(x, n) 问题描述 实现 pow(x, n) ，即计算 x 的 n 次幂函数。
 示例 1:  输入: 2.00000, 10输出: 1024.00000 示例 2:  输入: 2.10000, 3输出: 9.26100 示例 3:  输入: 2.00000, -2输出: 0.25000 解释: 2-2 = 1/22 = 1/4 = 0.25 说明: -100.0 &amp;lt; x &amp;lt; 100.0, n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。  代码实现 class Solution { public: double quickPow(double x, long long n) { if (n == 0) return 1.</description>
    </item>
    
  </channel>
</rss>
