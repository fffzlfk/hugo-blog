<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分治 on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/%E5%88%86%E6%B2%BB/</link>
    <description>Recent content in 分治 on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/%E5%88%86%E6%B2%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>不修改数组找出重复的数字</title>
      <link>https://fffzlfk.gitlab.io/2020/07/13/%D2%B3%D8%B8/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2020/07/13/%D2%B3%D8%B8/</guid>
      <description>问题描述 给定一个长度为$$ n+1 $$的数组nums，数组中所有的数均在$$ 1∼n $$的范围内，其中$$ n≥1 $$。
请找出数组中任意一个重复的数，但不能修改输入的数组。
样例 给定$ nums = [2, 3, 5, 4, 3, 2, 6, 7]$。
返回 2 或 3。 思考题：如果只能使用 $ O(1) $ 的额外空间，该怎么做呢？
分治，抽屉原理解法-$ O(nlogn) $  抽屉原理：n+1 个苹果放在 n 个抽屉里，那么至少有一个抽屉中会放两个苹果。
 用在这个题目中就是，一共有$ n+1 $个数，每个数的取值范围是1到n，所以至少会有一个数出现两次。
然后我们采用分治的思想，将每个数的取值的区间 $ [1, n] $划分成$ [1, n/2] $和$ [n/2+1, n] $两个子区间，然后分别统计两个区间中数的个数。 注意这里的区间是指 数的取值范围，而不是 数组下标。
划分之后，左右两个区间里一定至少存在一个区间，区间中数的个数大于区间长度。 这个可以用反证法来说明：如果两个区间中数的个数都小于等于区间长度，那么整个区间中数的个数就小于等于n，和有n+1个数矛盾。
因此我们可以把问题划归到左右两个子区间中的一个，而且由于区间中数的个数大于区间长度，根据抽屉原理，在这个子区间中一定存在某个数出现了两次。
依次类推，每次我们可以把区间长度缩小一半，直到区间长度为1时，我们就找到了答案。
复杂度分析 时间复杂度：每次会将区间长度缩小一半，一共会缩小 $ O(logn) $次。每次统计两个子区间中的数时需要遍历整个数组，时间复杂度是$ O(n) $。所以总时间复杂度是$ O(nlogn) $。 空间复杂度：代码中没有用到额外的数组，所以额外的空间复杂度是 $ O(1) $。</description>
    </item>
    
    <item>
      <title>归并排序、树状数组、线段树、RMQ、LRU(倍增)</title>
      <link>https://fffzlfk.gitlab.io/2020/06/22/%E9%B2%A2/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2020/06/22/%E9%B2%A2/</guid>
      <description>P1908 逆序对 AC代码(归并排序) AC代码(树状数组) P3374 【模板】树状数组 1 AC代码 P3368 【模板】树状数组 2 AC代码 P3372 【模板】线段树 1 AC代码 P3865 【模板】ST表 AC代码 POJ3264 Balanced Lineup【RMQ模板】 AC代码 P1816 忠诚【RMQ】 AC代码 P3379 【模板】最近公共祖先（LCA） AC代码   </description>
    </item>
    
  </channel>
</rss>
