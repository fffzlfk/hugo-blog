<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>栈 on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/%E6%A0%88/</link>
    <description>Recent content in 栈 on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 19 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>关键活动</title>
      <link>https://fffzlfk.gitlab.io/2019/12/19/%D8%BC/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/12/19/%D8%BC/</guid>
      <description>问题描述 假定一个工程项目由一组子任务构成，子任务之间有的可以并行执行，有的必须在完成了其它一些子任务后才能执行。“任务调度”包括一组子任务、以及每个子任务可以执行所依赖的子任务集。
比如完成一个专业的所有课程学习和毕业设计可以看成一个本科生要完成的一项工程，各门课程可以看成是子任务。有些课程可以同时开设，比如英语和C程序设计，它们没有必须先修哪门的约束；有些课程则不可以同时开设，因为它们有先后的依赖关系，比如C程序设计和数据结构两门课，必须先学习前者。
但是需要注意的是，对一组子任务，并不是任意的任务调度都是一个可行的方案。比如方案中存在“子任务A依赖于子任务B，子任务B依赖于子任务C，子任务C又依赖于子任务A”，那么这三个任务哪个都不能先执行，这就是一个不可行的方案。
任务调度问题中，如果还给出了完成每个子任务需要的时间，则我们可以算出完成整个工程需要的最短时间。在这些子任务中，有些任务即使推迟几天完成，也不会影响全局的工期；但是有些任务必须准时完成，否则整个项目的工期就要因此延误，这种任务就叫“关键活动”。
请编写程序判定一个给定的工程项目的任务调度是否可行；如果该调度方案可行，则计算完成整个工程项目需要的最短时间，并输出所有的关键活动。
输入格式: 输入第1行给出两个正整数N(≤100)和M，其中N是任务交接点（即衔接相互依赖的两个子任务的节点，例如：若任务2要在任务1完成后才开始，则两任务之间必有一个交接点）的数量。交接点按1~N编号，M是子任务的数量，依次编号为1~M。随后M行，每行给出了3个正整数，分别是该任务开始和完成涉及的交接点编号以及该任务所需的时间，整数间用空格分隔。
输出格式: 如果任务调度不可行，则输出0；否则第1行输出完成整个工程项目需要的时间，第2行开始输出所有关键活动，每个关键活动占一行，按格式“V-&amp;gt;W”输出，其中V和W为该任务开始和完成涉及的交接点编号。关键活动输出的顺序规则是：任务开始的交接点编号小者优先，起点编号相同时，与输入时任务的顺序相反。
输入样例: 7 81 2 41 3 32 4 53 4 34 5 14 6 65 7 56 7 2输出样例: 171-&amp;gt;22-&amp;gt;44-&amp;gt;66-&amp;gt;7代码实现 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; int n, m; struct Node { int id; int len; }; vector&amp;lt;Node&amp;gt; G[105]; int ve[105]; int vl[105]; int in[105]; stack&amp;lt;int&amp;gt; S; void read() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); int a, b, c; while (m--) { scanf(&amp;#34;%d%d%d&amp;#34;, &amp;amp;a, &amp;amp;b, &amp;amp;c); Node t; t.</description>
    </item>
    
    <item>
      <title>求前缀表达式的值</title>
      <link>https://fffzlfk.gitlab.io/2019/12/19/%C7%B0%CA%BD%D6%B5/</link>
      <pubDate>Thu, 19 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/12/19/%C7%B0%CA%BD%D6%B5/</guid>
      <description>问题描述 算术表达式有前缀表示法、中缀表示法和后缀表示法等形式。前缀表达式指二元运算符位于两个运算数之前，例如2+3*(7-4)+8/4的前缀表达式是：+ + 2 * 3 - 7 4 / 8 4。请设计程序计算前缀表达式的结果值。
输入格式: 输入在一行内给出不超过30个字符的前缀表达式，只包含+、-、*、/以及运算数，不同对象（运算数、运算符号）之间以空格分隔。
输出格式: 输出前缀表达式的运算结果，保留小数点后1位，或错误信息ERROR。
输入样例: + + 2 * 3 - 7 4 / 8 4输出样例: 13.0代码实现 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; float calculate(float x, float y, char t) { switch (t) { case &amp;#39;+&amp;#39;: return x + y; break; case &amp;#39;-&amp;#39;: return x - y; break; case &amp;#39;*&amp;#39;: return x * y; break; case &amp;#39;/&amp;#39;: if (y == 0.</description>
    </item>
    
    <item>
      <title>魔王语言解释</title>
      <link>https://fffzlfk.gitlab.io/2019/11/06/%C4%A7%D5%AD/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/06/%C4%A7%D5%AD/</guid>
      <description>问题描述 有一个魔王总是使用自己的一种非常精练而抽象的语言讲话，没人能听的懂。但他的语言是可以逐步解释成人能懂得语言的，因为他的语言是由以下两种形式的规则由人的语言逐 步抽象上去的：
 （1）α-&amp;gt;β1β2&amp;hellip;βn （2）(θδ1δ2&amp;hellip;δn)-&amp;gt;θδnθδn-1&amp;hellip;θδ1θ   在这两种形式中，从左到右均表示解释；从右到左表示抽象。试写一个魔王解释系统，把他的话解释成人能听懂得话。
 基本要求 用下述两条具体规则和上述规则实现。设大写字母表示魔王语言的词汇；小写字母表示人的语言词汇；希腊字母（a,b1,s,y1等）表示可以用大写或小写字母代换的变量。魔王语言可含人的词汇。
 (1) B-&amp;gt;tAdA (2) A-&amp;gt;sae  测试数据 B（ehnxgz）B 解释成tsaedsaeezegexeneietsaedsae 若将小写字母与汉字建立下表所示的对应关系，则魔王说的话是“天上一个鹅地上一个鹅鹅追鹅赶鹅下鹅蛋鹅恨鹅天上一个鹅地上一个鹅。” t d s a e z g x n i
天 地 上 一个 鹅 追 赶 下 蛋 恨
代码实现 C++ #include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt;#include &amp;lt;map&amp;gt;using namespace std; void solve(char c, stack&amp;lt;char&amp;gt; &amp;amp;S, string &amp;amp;str) { if (c &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39;) { printf(&amp;#34;%c&amp;#34;, c); str += c; } else if (c == &amp;#39;A&amp;#39;) { printf(&amp;#34;sae&amp;#34;); str += &amp;#34;sae&amp;#34;; } else if (c == &amp;#39;B&amp;#39;) { printf(&amp;#34;tsaedsae&amp;#34;); str += &amp;#34;tsaedsae&amp;#34;; } else if (c == &amp;#39;(&amp;#39;) { stack&amp;lt;char&amp;gt; SS; S.</description>
    </item>
    
    <item>
      <title>二叉树的创建和遍历</title>
      <link>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</guid>
      <description>问题描述 用C语言实现二叉树的表示及非递归中序遍历算法（没啥说的直接上代码）
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; #define MAXSIZE 1000 #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef char ElemType; using namespace std; typedef struct BiTNode { ElemType data; struct BiTNode *lchild, *rchild; } BiTNode, * BiTree; Status CreateBiTree(BiTree &amp;amp;T) { ElemType ch; scanf(&amp;#34;%c&amp;#34;, &amp;amp;ch); getchar(); if (ch == &amp;#39; &amp;#39;) T = NULL; else { if (!</description>
    </item>
    
    <item>
      <title>链栈</title>
      <link>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</guid>
      <description>简介 链栈一般用一个头指针结构top来表示，它指向栈顶元素，对于链表来说，top结构相当于它的头指针head。
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; struct Node { int data; Node *next; }; typedef struct { Node *top; int count; } * Stack; void InitStack(Stack &amp;amp;s) { s-&amp;gt;top = (Node*)malloc(sizeof(Node)); if (!s-&amp;gt;top) { puts(&amp;#34;ERROR&amp;#34;); return; } s-&amp;gt;top = NULL; s-&amp;gt;count = 0; } void Push(Stack &amp;amp;s, int e) { Node *node = (Node*)malloc(sizeof(Node)); node-&amp;gt;data = e; node-&amp;gt;next = s-&amp;gt;top; s-&amp;gt;top = node; s-&amp;gt;count++; } int Pop(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) { puts(&amp;#34;Empty&amp;#34;); exit(0); } Node *t = s-&amp;gt;top; s-&amp;gt;top = s-&amp;gt;top-&amp;gt;next; int e = t-&amp;gt;data; free(t); s-&amp;gt;count--; return e; } void ClearStack(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) return; Node *p, *q; p = s-&amp;gt;top; while (p) { q = p; p = p-&amp;gt;next; free(q); } s-&amp;gt;count = 0; } int main(int argc, char const *argv[]) { Stack s; InitStack(s); for (int i = 0; i &amp;lt; 10; i++) Push(s, i); // ClearStack(s); 	printf(&amp;#34;%d\n&amp;#34;, Pop(s)); Push(s, 100); for (int i = 0; i &amp;lt; 11; i++) { printf(&amp;#34;%d\n&amp;#34;, Pop(s)); } return 0; } </description>
    </item>
    
    <item>
      <title>括号匹配</title>
      <link>https://fffzlfk.gitlab.io/2019/10/09/%C6%A5/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/09/%C6%A5/</guid>
      <description>问题描述 假设一个算术表达式中可以包含三种括号：圆括号&#39;(&amp;lsquo;和&amp;rsquo;)&#39;、方括号&#39;[&amp;lsquo;和 &amp;lsquo;]&amp;lsquo;以及花括号&amp;rsquo;{&amp;lsquo;和&amp;rsquo;}&#39;。编写判别所给表达式中所含括号是否正确。
解决方法 可用“期待匹配消解”的思想来设计算法，对表达式中每一个左括号都期待一个相应的右括号与之匹配，且自左至右按表达式中出现的先后论，越迟的左括号期待匹配的渴望程度越高。
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; bool is_march(string str) { stack&amp;lt;char&amp;gt; s; for (int i = 0; i &amp;lt; (int)str.length(); i++) { switch (str[i]) { case &amp;#39;(&amp;#39;: case &amp;#39;[&amp;#39;: case &amp;#39;{&amp;#39;: s.push(str[i]); break; case &amp;#39;)&amp;#39;: if (s.empty() || s.top() != &amp;#39;(&amp;#39;) return false; else s.pop(); break; case &amp;#39;]&amp;#39;: if (s.empty() || s.top() != &amp;#39;[&amp;#39;) return false; else s.pop(); break; case &amp;#39;}&amp;#39;: if (s.empty() || s.</description>
    </item>
    
    <item>
      <title>表达式求值</title>
      <link>https://fffzlfk.gitlab.io/2019/09/29/%CA%BD%D6%B5/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/29/%CA%BD%D6%B5/</guid>
      <description>问题描述 表达式求值是一个基本问题，是栈的一个应用。如计算： 输入&#39;#&amp;lsquo;代表结束。
算法基本思想 使用两个工作栈，一个存运算符(optr)，另一个存操作数或运算结果(opnd)。
 首先将&amp;rsquo;#&amp;lsquo;push到optr； 依次读入每个字符，若是操作数则进opnd（注意多位数情况），若为运算符则于比较optr栈顶运算符比较优先级完成相应操作。  代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; int prec(char a, char b) { if (a == &amp;#39;+&amp;#39; || a == &amp;#39;-&amp;#39;) { if (b == &amp;#39;+&amp;#39; || b == &amp;#39;-&amp;#39; || b == &amp;#39;)&amp;#39; || b == &amp;#39;#&amp;#39;) return 1; else return -1; } else if (a == &amp;#39;*&amp;#39; || a == &amp;#39;/&amp;#39;) { if (b == &amp;#39;(&amp;#39;) return -1; else return 1; } else if (a == &amp;#39;(&amp;#39; || a == &amp;#39;#&amp;#39;) { if (a == &amp;#39;(&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;)&amp;#39;) return 0; else if (a == &amp;#39;(&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;#&amp;#39;) return -2; else if (a == &amp;#39;#&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;)&amp;#39;) return -2; else if (a == &amp;#39;#&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;#&amp;#39;) return 0; else return -1; } else if (a == &amp;#39;)&amp;#39;) { if (b == &amp;#39;(&amp;#39;) return -2; else return 1; } return -2; } int Operate(int a, int b, char c) { if (c == &amp;#39;+&amp;#39;) return a + b; else if (c == &amp;#39;-&amp;#39;) return a - b; else if (c == &amp;#39;*&amp;#39;) return a * b; else if (c == &amp;#39;/&amp;#39;) return a / b; else exit(0); } int EvaluateExpression(string s) { stack&amp;lt;char&amp;gt; optr; stack&amp;lt;int&amp;gt; opnd; optr.</description>
    </item>
    
  </channel>
</rss>
