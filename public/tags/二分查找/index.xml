<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>二分查找 on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
    <description>Recent content in 二分查找 on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 23 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode-50 &amp; LeetCode-34</title>
      <link>https://fffzlfk.gitlab.io/2019/11/23/leetcode-50/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/23/leetcode-50/</guid>
      <description>LeetCode-50-Pow(x, n) 问题描述 实现 pow(x, n) ，即计算 x 的 n 次幂函数。
 示例 1:  输入: 2.00000, 10输出: 1024.00000 示例 2:  输入: 2.10000, 3输出: 9.26100 示例 3:  输入: 2.00000, -2输出: 0.25000 解释: 2-2 = 1/22 = 1/4 = 0.25 说明: -100.0 &amp;lt; x &amp;lt; 100.0, n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。  代码实现 class Solution { public: double quickPow(double x, long long n) { if (n == 0) return 1.</description>
    </item>
    
  </channel>
</rss>
