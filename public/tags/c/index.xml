<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/c/</link>
    <description>Recent content in C on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉排序树的合并</title>
      <link>https://fffzlfk.gitlab.io/2019/12/01/%CF%B2/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/12/01/%CF%B2/</guid>
      <description>问题描述 试编写程序，将两棵二叉排序树合并为一棵二叉排序树。
输入格式 按照先序序列，分两行输入两棵二叉排序树各结点（结点值大于0），其中-1表示取消建立子树结点。
输出格式 按照中序序列输出合并后的二叉排序树。
输入样例 12 8 4 -1 -1 10 -1 -1 16 13 -1 -1 18 -1 -117 6 2 -1 -1 9 -1 -1 24 19 -1 -1 26 -1 -1输出样例 2 4 6 8 9 10 12 13 16 17 18 19 24 26代码实现 #include &amp;lt;bits/stdc++.h&amp;gt;using namespace std; struct TreeNode { int data; TreeNode *left; TreeNode *right; TreeNode(int n) : data(n) {} }; void createBTree(TreeNode *&amp;amp;root) { int t; scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); if (t !</description>
    </item>
    
    <item>
      <title>哈希表设计</title>
      <link>https://fffzlfk.gitlab.io/2019/12/01/%CF%A3/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/12/01/%CF%A3/</guid>
      <description>问题描述 针对某个集体（比如你所在的班级）中的“人名”设计一个哈希表，使得平均查找长度不超过R，完成相应的建表和查表程序。
基本要求 假设人名为中国人姓名的汉语拼音形式。待填入哈希表的人名共有30个，取平均查找长度的上限为2。哈希函数用除留余数法构造，用伪随机探测再散列发处理冲突。
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;using namespace std; #define M 50 struct name { char str[20]; int value; } Name[30]; struct hash { char name[20]; int key; int sum; int flag; } HashList[M]; void init() { FILE *fp; fp = fopen(&amp;#34;text.txt&amp;#34;, &amp;#34;r&amp;#34;); for (int i = 0; i &amp;lt; 30; i++) { fgets(Name[i].str, 20, fp); int j = 0; for (; Name[i].str[j] != &amp;#39;\n&amp;#39;; j++) ; Name[i].</description>
    </item>
    
    <item>
      <title>二叉树的遍历</title>
      <link>https://fffzlfk.gitlab.io/2019/11/26/%C4%B1/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/26/%C4%B1/</guid>
      <description>问题描述 二叉树的遍历 本题要求给定二叉树的4种遍历。
函数接口定义：
void InorderTraversal( BinTree BT ); void PreorderTraversal( BinTree BT ); void PostorderTraversal( BinTree BT ); void LevelorderTraversal( BinTree BT ); 其中BinTree结构定义如下：
typedef struct TNode *Position; typedef Position BinTree; struct TNode{ ElementType Data; BinTree Left; BinTree Right; }; 要求4个函数分别按照访问顺序打印出结点的内容，格式为一个空格跟着一个字符。
输出样例 （对于图中给出的树）：
Inorder: D B E F A G H C IPreorder: A B D F E C G H IPostorder: D E F B H G I C ALevelorder: A B C D F G I E H代码实现 void InorderTraversal(BinTree BT) { if (BT) { InorderTraversal(BT-&amp;gt;Left); printf(&amp;#34; %c&amp;#34;, BT-&amp;gt;Data); InorderTraversal(BT-&amp;gt;Right); } else { return; } } void PreorderTraversal(BinTree BT) { if (BT) { printf(&amp;#34; %c&amp;#34;, BT-&amp;gt;Data); PreorderTraversal(BT-&amp;gt;Left); PreorderTraversal(BT-&amp;gt;Right); } else { return; } } void PostorderTraversal(BinTree BT) { if (BT) { PostorderTraversal(BT-&amp;gt;Left); PostorderTraversal(BT-&amp;gt;Right); printf(&amp;#34; %c&amp;#34;, BT-&amp;gt;Data); } else { return; } } void LevelorderTraversal(BinTree BT) { BinTree Q[100]; int front = 0; int rear = 0; if (BT) { Q[++rear] = BT; } while (front !</description>
    </item>
    
    <item>
      <title>二叉树前序、中序、后序遍历的相互求法</title>
      <link>https://fffzlfk.gitlab.io/2019/11/24/%D7%AA/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/24/%D7%AA/</guid>
      <description>一、已知前序、中序、求后序遍历 例如：
前序遍历: GDAFEMHZ中序遍历: ADEFGHMZ  根据前序遍历的特点，我们知道根结点为G
  观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。
  观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。
  同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。
  观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：
 确定根,确定左子树，确定右子树。 在左子树中递归。 在右子树中递归。 打印当前根。    核心代码
buildTreebyPre(preorder + 1, inorder, root_idx, root-&amp;gt;left); buildTreebyPre(preorder + 1 + root_idx, inorder + root_idx + 1, length - (root_idx + 1), root-&amp;gt;right); 二、已知中序、后序遍历、求前序遍历 依然是上面的题，这次我们只给出中序和后序遍历：
中序遍历: ADEFGHMZ后序遍历: AEFDHZMG  根据后序遍历的特点，我们知道后序遍历最后一个结点即为根结点，即根结点为G。
  观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。
  观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。
  同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前后序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。</description>
    </item>
    
    <item>
      <title>POJ-2387-Til_the_Cows_Come_Home</title>
      <link>https://fffzlfk.gitlab.io/2019/11/22/poj2387/</link>
      <pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/22/poj2387/</guid>
      <description>问题描述 贝西（Bessie）在野外，想回到谷仓以尽可能多地睡觉，直到农夫约翰（John Farmer）叫醒她早上进行挤奶。贝西需要美睡，所以她想尽快回来。
农夫约翰的田地里有N（2 &amp;lt;= N &amp;lt;= 1000）个地标，唯一编号为1..N。地标1是谷仓；Bessie整日站立的苹果树丛是地标N。奶牛使用地标之间长度各异的T（1 &amp;lt;= T &amp;lt;= 2000）双向奶牛场在田间旅行。贝西对自己的导航能力不抱有信心，因此，从开始到结束，她始终保持在步道上。
给定地标之间的路径，确定Bessie返回谷仓必须行走的最小距离。可以保证存在这样的路经。
大意 题目会给你n个点，m条边，然后给你每条边又哪两个点相连，并且其中的路程是多少。我们需要找到最短路径的总路程。
样例输入 5 51 2 202 3 303 4 204 5 201 5 100样例输出 90代码实现 #include &amp;lt;algorithm&amp;gt;#include &amp;lt;cstring&amp;gt;#include &amp;lt;iostream&amp;gt;using namespace std; #define Max 0xfffffff #define N 1005 int arcs[N][N]; int visit[N]; int f[N]; int n, t; void shortestPath() { int i, j, k, min; memset(visit, 0, sizeof(visit)); for (i = 1; i &amp;lt;= n; i++) f[i] = arcs[1][i]; f[1] = 0; for (i = 1; i &amp;lt; n; i++) { min = Max; for (j = 1; j &amp;lt;= n; j++) { if (!</description>
    </item>
    
    <item>
      <title>最小生成树的求法</title>
      <link>https://fffzlfk.gitlab.io/2019/11/21/%D1%81/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/21/%D1%81/</guid>
      <description>问题描述 请对下图的无向带权图 (1)写出它的邻接矩阵，并按普里姆算法求其最小生成树； (2)写出它的邻接表，并按克鲁斯卡尔算法求其最小生成树。 问题解决 邻接矩阵 0 4 3 - - - - -4 0 5 5 9 - - -3 5 0 5 - - - 5- 5 5 0 7 6 5 4- 9 - 7 0 3 - -- - - 6 3 0 2 -- - - 5 - 2 0 6- - 5 4 - - 6 0#include &amp;lt;stdio.</description>
    </item>
    
    <item>
      <title>98.验证二叉搜索树</title>
      <link>https://fffzlfk.gitlab.io/2019/11/17/leetcode-98-%D6%A4/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/17/leetcode-98-%D6%A4/</guid>
      <description>问题描述 给定一个二叉树，判断其是否是一个有效的二叉搜索树。
假设一个二叉搜索树具有如下特征：
节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。
示例 示例 1:  输入:   2/ \1 3 输出: true  示例 2:  输入:   5/ \1 4/ \3 6 输出: false  解释: 输入为: [5,1,4,null,null,3,6]。  根节点的值为 5 ，但是其右子节点值为 4 。
代码实现 bool helper(struct TreeNode *root, int lower, int upper) { if (!root) return true; // printf(&amp;#34;current low:%d\ncurrent up:%d\n&amp;#34;, lower, upper); 	if (lower !</description>
    </item>
    
    <item>
      <title>无向图的遍历</title>
      <link>https://fffzlfk.gitlab.io/2019/11/15/%CD%BC%C4%B1/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/15/%CD%BC%C4%B1/</guid>
      <description>问题描述  分别使用邻接表和邻接矩阵存储无向图图，并设计深度优先搜索遍历算法和广度优先搜索遍历算法。 用1,2,3，&amp;hellip;，表示结点 并分别求出深度优先生成树和广度优先生成树的边集。  代码实现 邻接表 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define MAX_VERTEX_NUM 31 typedef int InfoType; typedef int VertexType; bool visited[MAX_VERTEX_NUM]; bool dfs_arc[MAX_VERTEX_NUM][MAX_VERTEX_NUM]; bool bfs_arc[MAX_VERTEX_NUM][MAX_VERTEX_NUM]; typedef struct ArcNode { int adjvex; ArcNode *nextarc; InfoType *info; } ArcNode; typedef struct VNode { VertexType data; ArcNode *firstarc; } VNode, AdjList[MAX_VERTEX_NUM]; typedef struct { AdjList vertices; int vexnum, arcnum; int kind; } ALGraph; //创建无向图 void Create(ALGraph &amp;amp;G) { puts(&amp;#34;输入节点数和边数&amp;#34;); scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;G.vexnum, &amp;amp;G.arcnum); for (int i = 1; i &amp;lt;= G.</description>
    </item>
    
    <item>
      <title>求元素子树深度</title>
      <link>https://fffzlfk.gitlab.io/2019/11/13/%D4%AB/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/13/%D4%AB/</guid>
      <description>问题描述 请设计递归算法求以元素为x根节点的子树深度
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define OK 1 #define ERROR 0 typedef char ElemType; typedef int Status; typedef struct Node { ElemType data; Node *left; Node *right; } * BTree; Status createBTree(BTree &amp;amp;T) { ElemType c; scanf(&amp;#34;%c&amp;#34;, &amp;amp;c); getchar(); if (c == &amp;#39; &amp;#39;) T = NULL; else { if (!(T = (Node*)malloc(sizeof(Node)))) return ERROR; T-&amp;gt;data = c; printf(&amp;#34;请输入%c的左孩子\n&amp;#34;, c); createBTree(T-&amp;gt;left); printf(&amp;#34;请输入%c的右孩子\n&amp;#34;, c); createBTree(T-&amp;gt;right); } } int getDepth(BTree T) { if (T == NULL) return 0; else { return getDepth(T-&amp;gt;left) &amp;gt; getDepth(T-&amp;gt;right) ?</description>
    </item>
    
    <item>
      <title>哈夫曼编码及译码器</title>
      <link>https://fffzlfk.gitlab.io/2019/11/10/%EB%BC%B0/</link>
      <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/10/%EB%BC%B0/</guid>
      <description>问题描述 利用哈夫曼编码进行通信可以大大提高信道利用率,缩短信息传输时间,降低传输成本。但是,这要求在发送端通过一个编码系统对待传数据预先码,在接收端将传来的数据进行译码(复原)。对于双工信道(即可以双向传输信息的信道),每端需要一个完编/译码系统。试为这样的信息收发站写一个哈夫曼码的编/译码系统。
基本要求 一个完整的系统应具有以下功能:
 I :初始化(Initialization)。从终端读人字符集大小n,以及n个字符和n个权值,建立哈夫曼树,并将它存于文件 hfmTree 中。 E :编码(Encoding)。利用以建好的哈夫曼树(如不在内存,则从文件 hfmTree 中读人),对文件 ToBeTran 中的正文进行编码,然后将结果存人文件 CodeFile 中。 D :译 码(Decoding)。利用已建好的哈夫曼树将文件 CodeFile 中的代码进行译码,结果存人文件 TextFile 中。 P :印代码文件(Print)。将文件 CodeFile 以紧凑格式显示在终端上,每行50个代码。同时将此字符形式的编码文件写人文件 CodePrin。 T :打印哈夫曼树(Tree printing)。将已在内存中的哈夫曼树以直观的方式(树或凹人表形式)显示在终端上,同时将此字符形式的哈夫曼树写人文件 TreePrint 中。  代码实现 #include &amp;lt;bits/stdc++.h&amp;gt;#define INT_MAX 2147483647 #define OK 1 #define ERROR 0 typedef char ElemType; typedef int Status; typedef struct { char c; int weight; int parent; int left; int right; char *code; } HNode; HNode *T; int n; Status select(HNode *T, int pos, int *s1, int *s2) { int m1, m2; m1 = m2 = INT_MAX; for (int j = 1; j &amp;lt;= pos; j++) { if (T[j].</description>
    </item>
    
    <item>
      <title>约瑟夫环问题</title>
      <link>https://fffzlfk.gitlab.io/2019/11/06/%D5%AC%C9%AA/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/06/%D5%AC%C9%AA/</guid>
      <description>问题描述 编号为1, 2, 3,&amp;hellip;,n的n个人围成一圈，每个人持有一个密码（正整数），从初始m为上限从1开始报数，报到m为止，报m的出列，将他的密码作为下一个m值，如此下去，求出出列顺序。
解决思路 很容易想到用循环链表来解决该问题
测试样例 样例输入 7 203 1 7 2 4 8 4样例输出 6147235代码实现 Clang #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; typedef struct Node { int data; int id; Node *next; } * LinkList; void Create(LinkList &amp;amp;L, int n) { L = (Node*)malloc(sizeof(Node)); Node *node, *end; end = L; for (int i = 0; i &amp;lt; n; i++) { node = (Node*)malloc(sizeof(Node)); scanf(&amp;#34;%d&amp;#34;, &amp;amp;node-&amp;gt;data); node-&amp;gt;id = i + 1; end-&amp;gt;next = node; end = node; } end-&amp;gt;next = L-&amp;gt;next; } int solve(LinkList &amp;amp;L, int m) { if (m &amp;lt; 1) return -1; int t = m; Node *last = L-&amp;gt;next; Node *cur = L-&amp;gt;next; while (cur-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>二叉树的创建和遍历</title>
      <link>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</guid>
      <description>问题描述 用C语言实现二叉树的表示及非递归中序遍历算法（没啥说的直接上代码）
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; #define MAXSIZE 1000 #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef char ElemType; using namespace std; typedef struct BiTNode { ElemType data; struct BiTNode *lchild, *rchild; } BiTNode, * BiTree; Status CreateBiTree(BiTree &amp;amp;T) { ElemType ch; scanf(&amp;#34;%c&amp;#34;, &amp;amp;ch); getchar(); if (ch == &amp;#39; &amp;#39;) T = NULL; else { if (!</description>
    </item>
    
    <item>
      <title>链栈</title>
      <link>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</guid>
      <description>简介 链栈一般用一个头指针结构top来表示，它指向栈顶元素，对于链表来说，top结构相当于它的头指针head。
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; struct Node { int data; Node *next; }; typedef struct { Node *top; int count; } * Stack; void InitStack(Stack &amp;amp;s) { s-&amp;gt;top = (Node*)malloc(sizeof(Node)); if (!s-&amp;gt;top) { puts(&amp;#34;ERROR&amp;#34;); return; } s-&amp;gt;top = NULL; s-&amp;gt;count = 0; } void Push(Stack &amp;amp;s, int e) { Node *node = (Node*)malloc(sizeof(Node)); node-&amp;gt;data = e; node-&amp;gt;next = s-&amp;gt;top; s-&amp;gt;top = node; s-&amp;gt;count++; } int Pop(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) { puts(&amp;#34;Empty&amp;#34;); exit(0); } Node *t = s-&amp;gt;top; s-&amp;gt;top = s-&amp;gt;top-&amp;gt;next; int e = t-&amp;gt;data; free(t); s-&amp;gt;count--; return e; } void ClearStack(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) return; Node *p, *q; p = s-&amp;gt;top; while (p) { q = p; p = p-&amp;gt;next; free(q); } s-&amp;gt;count = 0; } int main(int argc, char const *argv[]) { Stack s; InitStack(s); for (int i = 0; i &amp;lt; 10; i++) Push(s, i); // ClearStack(s); 	printf(&amp;#34;%d\n&amp;#34;, Pop(s)); Push(s, 100); for (int i = 0; i &amp;lt; 11; i++) { printf(&amp;#34;%d\n&amp;#34;, Pop(s)); } return 0; } </description>
    </item>
    
    <item>
      <title>KMP算法</title>
      <link>https://fffzlfk.gitlab.io/2019/10/13/kmp%E3%B7%A8/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/13/kmp%E3%B7%A8/</guid>
      <description>KMP算法描述  算法流程   设文本串匹配到i，模式串匹配到j
  若j == -1或者匹配成功(s[i] == p[j])，则i++，j++； 若j != -1且匹配不成功，则j = next[j]（相当于模式串p相对于文本串s向右移动(j - next[j])位）。  得到next数组   next数组表示当前字符之前的字符串中，有多大长度的相同前缀后缀
 对于P的前j+1个序列字符：
 若p[k] == p[j]，则next[j + 1 ] = next [j] + 1 = k + 1； 若p[k ] ≠ p[j]，如果此时p[ next[k] ] == p[j ]，则next[ j + 1 ] = next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。  代码实现 C语言 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define MAXN 100  int* GetNext(char* p) { int pLen = strlen(p); int j = 0; int k = -1; int* next = new int[strlen(p)]; next[0] = -1; while (j &amp;lt; pLen - 1) { if (k == -1 || p[j] == p[k]) { j++; k++; if (p[j] !</description>
    </item>
    
    <item>
      <title>循环队列</title>
      <link>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</guid>
      <description>问题描述 如果希望循环队列的每一个元素都能用到，需设置一个标志域tag，用tag的0或1来区分是否满队列。试写出这种结构的算法，并从时间和空间分析这两种这两种方法的适用范围。
带标志域（tag）的算法实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef int ElemType; #define MAXSIZE 100 typedef struct { ElemType *base; int front; int rear; int tag; } SqQueue; Status InitQueue(SqQueue &amp;amp;Q) { Q.base = (ElemType*) malloc(MAXSIZE * sizeof(ElemType)); if (!Q.base) exit(OVERFLOW); Q.front = Q.rear = 0; Q.tag = 0; return OK; } int QueueLength(SqQueue Q) { return (Q.</description>
    </item>
    
    <item>
      <title>数据结构课后作业</title>
      <link>https://fffzlfk.gitlab.io/2019/09/28/chp1%CE%BA%D2%B5/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/28/chp1%CE%BA%D2%B5/</guid>
      <description>请参考《数据结构题集（C语言版）》严慧敏版
 2.11 typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList; Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 	L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType)); if (!L.elem) exit(OVERFLOW); L.length = 0; L.listsize = LIST_INIT_SIZE; return OK; } Status ListInsert_Sq(SqList &amp;amp;L, int i, ElemType e) { //在顺序线性表L中的第i个位置之前插入新的元素e 	if (i &amp;lt; 1 || i &amp;gt; L.length + 1) return ERROR; if (L.length &amp;gt; L.listsize) { ElemType *newbase = (ElemType*) realloc(L.</description>
    </item>
    
    <item>
      <title>用C语言实现静态链表</title>
      <link>https://fffzlfk.gitlab.io/2019/09/20/c%CA%B5%CC%AC/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/20/c%CA%B5%CC%AC/</guid>
      <description>静态链表 用数组替代指针，数组中的每一项有两个域：data &amp;amp; cur；data用来存放数据，而cur则为游标，相当于链表中的next。 代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define MAXSIZE 1000 #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef int ElemType; typedef struct { ElemType data; int cur; } Component, StaticLinkList[MAXSIZE]; /*将下标为k的空闲结点回收到备用链表*/ void Free_SSL(StaticLinkList space, int k) { space[k].cur = space[0].cur; space[0].cur = k; } int ListLength(StaticLinkList L) { int j = 0; int i = L[MAXSIZE-1].</description>
    </item>
    
    <item>
      <title>简单双向循环链表的表示和实现(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/15/%D1%AD%C4%B1%CA%BE%CA%B5c/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/15/%D1%AD%C4%B1%CA%BE%CA%B5c/</guid>
      <description>双向循环链表 双向链表的每一个节点有两个指针，一个是next（下一个），一个是prep（上一个），其他和单向类似；至于循环双向链表，它的结构为： 代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10  typedef int Status; typedef int ElemType; typedef struct Node { ElemType value; Node* prep; Node* next; } DbLink; DbLink* CreateDbLink(int n) { DbLink *head, *node, *end; head = (DbLink*)malloc(sizeof(DbLink)); if (!head) exit(OVERFLOW); end = head; for (int i = 0; i &amp;lt; n; i++) { node = (DbLink*)malloc(sizeof(DbLink)); if (!</description>
    </item>
    
    <item>
      <title>归并两个非递减排列的线性表(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/12/%E9%B2%A2%C7%B5%DD%BC%D0%B5%D5%A1c/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/12/%E9%B2%A2%C7%B5%DD%BC%D0%B5%D5%A1c/</guid>
      <description>问题 已知线性表La, Lb按非递减有序排列，现需要将La, Lb归并为一个新的非递减有序排列线性表Lc。例如
 La = (3, 5, 8, 11) Lb = (2, 6, 8, 20) 则Lc = (2, 3, 5, 6, 8, 8,11, 20)
 方法 设两个指针pa, pb分别指向La，Lb的首元素，当前应插入Lc的元素为复杂度 显然该算法为线性复杂度，即O(n)；原因是La, Lb为非递减有序排列，故lb中的每个元素不必遍历la中每个元素；而且Lc插入操作实则是通过复制完成的。
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10  typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList; Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 	L.</description>
    </item>
    
    <item>
      <title>求两个简单链表的并集</title>
      <link>https://fffzlfk.gitlab.io/2019/09/07/%C4%BE/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/07/%C4%BE/</guid>
      <description>问题： 给出两个单向链表，求出它们的并集 例如：
 a = [1, 2, 3], b = [2, 3, 4]; 实现InterSect(a, b), 使得a = [1, 2, 3, 4]
 代码实现 #include &amp;lt;stdio.h&amp;gt; typedef struct node { int value; node *next; } LinkList; LinkList* InitList(int n) { LinkList *head, *node, *end; head = new LinkList; end = head; while (n--) { node = new LinkList; scanf(&amp;#34;%d&amp;#34;, &amp;amp;node-&amp;gt;value); end-&amp;gt;next = node; end = node; } end-&amp;gt;next = NULL; return head; } void ShowList(LinkList *h) { while (h-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>线性表的顺序表示和实现(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/08/%D5%A1%CA%BE%CA%B5c/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/08/%D5%A1%CA%BE%CA%B5c/</guid>
      <description>线性表的顺序表示:  线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素。 数据元素的存储位置之间满足如下关系:  一般来说:   #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2
#define LIST_INIT_SIZE 100 #define LISTINCREMENT 10
typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList;
Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType)); if (!L.elem) exit(OVERFLOW); L.length = 0; L.listsize = LIST_INIT_SIZE; return OK; }</description>
    </item>
    
    <item>
      <title>一个用C实现的简单的单向链表</title>
      <link>https://fffzlfk.gitlab.io/2019/09/03/%D2%BBc%CA%B5%D6%B5%C4%BC%C4%B5-2019/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/03/%D2%BBc%CA%B5%D6%B5%C4%BC%C4%B5-2019/</guid>
      <description>typedef struct value { int v; struct value *next; } LinkList;
LinkList *create(int n) { LinkList *head, node, end; head = (LinkList)malloc(sizeof(LinkList)); end = head; for (int i = 0; i &amp;lt; n; i++) { node = (LinkList)malloc(sizeof(LinkList)); scanf(&amp;quot;%d&amp;quot;, &amp;amp;node-&amp;gt;v); end-&amp;gt;next = node; end = node; } end-&amp;gt;next = NULL; return head; }
void change(LinkList *list, int n) { LinkList *t = list; int i = 0; while(i &amp;lt; n &amp;amp;&amp;amp; t !</description>
    </item>
    
    <item>
      <title>求k阶斐波那契第m项的值</title>
      <link>https://fffzlfk.gitlab.io/2019/09/03/k%EC%B3%B2m%D6%B5-2019/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/03/k%EC%B3%B2m%D6%B5-2019/</guid>
      <description>代码实现 #include &amp;lt;stdio.h&amp;gt;const int MAXN = 10000; long long fib(int k, int m) { long long a[MAXN]; for (int i = 0; i &amp;lt; k - 1; i++) { a[i] = 0; } a[k - 1] = 1; for (int i = k; i &amp;lt;= m; i++) { long long s = 0; for (int j = i - 1; j &amp;gt; i - 1 - k; j--) { s += a[j]; } a[i] = s; } return a[m]; } int main() { int k, m; while (scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;k, &amp;amp;m) == 2) { printf(&amp;#34;%lld\n&amp;#34;, fib(k, m)); } return 0; } 注释 该题目出现在数据结构（C语言版）题集中的1.</description>
    </item>
    
  </channel>
</rss>
