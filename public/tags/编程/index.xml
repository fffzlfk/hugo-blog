<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编程 on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/%E7%BC%96%E7%A8%8B/</link>
    <description>Recent content in 编程 on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 30 Oct 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/%E7%BC%96%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二叉树的创建和遍历</title>
      <link>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/30/%C4%B5%CD%B1/</guid>
      <description>问题描述 用C语言实现二叉树的表示及非递归中序遍历算法（没啥说的直接上代码）
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; #define MAXSIZE 1000 #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef char ElemType; using namespace std; typedef struct BiTNode { ElemType data; struct BiTNode *lchild, *rchild; } BiTNode, * BiTree; Status CreateBiTree(BiTree &amp;amp;T) { ElemType ch; scanf(&amp;#34;%c&amp;#34;, &amp;amp;ch); getchar(); if (ch == &amp;#39; &amp;#39;) T = NULL; else { if (!</description>
    </item>
    
    <item>
      <title>链栈</title>
      <link>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/23/%D5%BB%CA%B5/</guid>
      <description>简介 链栈一般用一个头指针结构top来表示，它指向栈顶元素，对于链表来说，top结构相当于它的头指针head。
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; struct Node { int data; Node *next; }; typedef struct { Node *top; int count; } * Stack; void InitStack(Stack &amp;amp;s) { s-&amp;gt;top = (Node*)malloc(sizeof(Node)); if (!s-&amp;gt;top) { puts(&amp;#34;ERROR&amp;#34;); return; } s-&amp;gt;top = NULL; s-&amp;gt;count = 0; } void Push(Stack &amp;amp;s, int e) { Node *node = (Node*)malloc(sizeof(Node)); node-&amp;gt;data = e; node-&amp;gt;next = s-&amp;gt;top; s-&amp;gt;top = node; s-&amp;gt;count++; } int Pop(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) { puts(&amp;#34;Empty&amp;#34;); exit(0); } Node *t = s-&amp;gt;top; s-&amp;gt;top = s-&amp;gt;top-&amp;gt;next; int e = t-&amp;gt;data; free(t); s-&amp;gt;count--; return e; } void ClearStack(Stack &amp;amp;s) { if (s-&amp;gt;count == 0) return; Node *p, *q; p = s-&amp;gt;top; while (p) { q = p; p = p-&amp;gt;next; free(q); } s-&amp;gt;count = 0; } int main(int argc, char const *argv[]) { Stack s; InitStack(s); for (int i = 0; i &amp;lt; 10; i++) Push(s, i); // ClearStack(s); 	printf(&amp;#34;%d\n&amp;#34;, Pop(s)); Push(s, 100); for (int i = 0; i &amp;lt; 11; i++) { printf(&amp;#34;%d\n&amp;#34;, Pop(s)); } return 0; } </description>
    </item>
    
    <item>
      <title>删除子串</title>
      <link>https://fffzlfk.gitlab.io/2019/10/21/%C9%BE%D3%B5/</link>
      <pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/21/%C9%BE%D3%B5/</guid>
      <description>问题描述 删除s中所有与t相同的子串
 如 s = &amp;ldquo;abcdabcdabcd&amp;rdquo;, t = &amp;ldquo;cd&amp;rdquo;, 则操作后s = &amp;ldquo;ababab&amp;rdquo;
 代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;using namespace std; int* GetNext(string p) { int pLen = p.length(); int *next = new int[pLen]; next[0] = -1; int j = 0; int k = -1; while (j &amp;lt; pLen - 1) { if (k == -1 || p[j] == p[k]) { j++; k++; next[j] = k; } else { j = next[j]; } } return next; } void solve(string &amp;amp;s, string p) { int* next =GetNext(p); int sLen = s.</description>
    </item>
    
    <item>
      <title>求最长重复子串及其位置</title>
      <link>https://fffzlfk.gitlab.io/2019/10/19/%D8%B8%D3%B5%CE%BB/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/19/%D8%B8%D3%B5%CE%BB/</guid>
      <description>问题描述 给出一个线性排列的串s，求出s中出现的第一个最长重复子串及其位置；并分析时间复杂度。
 例如 s = &amp;ldquo;abcdbcd&amp;rdquo;，它的第一个出现的最长重复子串及其位置分别为：&amp;ldquo;bcd，1&amp;rdquo;。
 代码实现 #include &amp;lt;iostream&amp;gt;using namespace std; int* GetNext(string p) { int pLen = p.length(); int* next = new int[pLen]; next[0] = -1; int j = 0; int k = -1; while (j &amp;lt; pLen - 1) { if (k == -1 || p[k] == p[j]) { k++; j++; if (p[k] != p[j]) { next[j] = k; } else { next[j] = next[k]; } } else { k = next[k]; } } return next; } int KmpSearch(string s, string p) { int *next = GetNext(p); int sLen = s.</description>
    </item>
    
    <item>
      <title>KMP算法</title>
      <link>https://fffzlfk.gitlab.io/2019/10/13/kmp%E3%B7%A8/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/13/kmp%E3%B7%A8/</guid>
      <description>KMP算法描述  算法流程   设文本串匹配到i，模式串匹配到j
  若j == -1或者匹配成功(s[i] == p[j])，则i++，j++； 若j != -1且匹配不成功，则j = next[j]（相当于模式串p相对于文本串s向右移动(j - next[j])位）。  得到next数组   next数组表示当前字符之前的字符串中，有多大长度的相同前缀后缀
 对于P的前j+1个序列字符：
 若p[k] == p[j]，则next[j + 1 ] = next [j] + 1 = k + 1； 若p[k ] ≠ p[j]，如果此时p[ next[k] ] == p[j ]，则next[ j + 1 ] = next[k] + 1，否则继续递归前缀索引k = next[k]，而后重复此过程。  代码实现 C语言 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; #define MAXN 100  int* GetNext(char* p) { int pLen = strlen(p); int j = 0; int k = -1; int* next = new int[strlen(p)]; next[0] = -1; while (j &amp;lt; pLen - 1) { if (k == -1 || p[j] == p[k]) { j++; k++; if (p[j] !</description>
    </item>
    
    <item>
      <title>循环队列</title>
      <link>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</guid>
      <description>问题描述 如果希望循环队列的每一个元素都能用到，需设置一个标志域tag，用tag的0或1来区分是否满队列。试写出这种结构的算法，并从时间和空间分析这两种这两种方法的适用范围。
带标志域（tag）的算法实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef int ElemType; #define MAXSIZE 100 typedef struct { ElemType *base; int front; int rear; int tag; } SqQueue; Status InitQueue(SqQueue &amp;amp;Q) { Q.base = (ElemType*) malloc(MAXSIZE * sizeof(ElemType)); if (!Q.base) exit(OVERFLOW); Q.front = Q.rear = 0; Q.tag = 0; return OK; } int QueueLength(SqQueue Q) { return (Q.</description>
    </item>
    
    <item>
      <title>括号匹配</title>
      <link>https://fffzlfk.gitlab.io/2019/10/09/%C6%A5/</link>
      <pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/09/%C6%A5/</guid>
      <description>问题描述 假设一个算术表达式中可以包含三种括号：圆括号&#39;(&amp;lsquo;和&amp;rsquo;)&#39;、方括号&#39;[&amp;lsquo;和 &amp;lsquo;]&amp;lsquo;以及花括号&amp;rsquo;{&amp;lsquo;和&amp;rsquo;}&#39;。编写判别所给表达式中所含括号是否正确。
解决方法 可用“期待匹配消解”的思想来设计算法，对表达式中每一个左括号都期待一个相应的右括号与之匹配，且自左至右按表达式中出现的先后论，越迟的左括号期待匹配的渴望程度越高。
代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; bool is_march(string str) { stack&amp;lt;char&amp;gt; s; for (int i = 0; i &amp;lt; (int)str.length(); i++) { switch (str[i]) { case &amp;#39;(&amp;#39;: case &amp;#39;[&amp;#39;: case &amp;#39;{&amp;#39;: s.push(str[i]); break; case &amp;#39;)&amp;#39;: if (s.empty() || s.top() != &amp;#39;(&amp;#39;) return false; else s.pop(); break; case &amp;#39;]&amp;#39;: if (s.empty() || s.top() != &amp;#39;[&amp;#39;) return false; else s.pop(); break; case &amp;#39;}&amp;#39;: if (s.empty() || s.</description>
    </item>
    
    <item>
      <title>表达式求值</title>
      <link>https://fffzlfk.gitlab.io/2019/09/29/%CA%BD%D6%B5/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/29/%CA%BD%D6%B5/</guid>
      <description>问题描述 表达式求值是一个基本问题，是栈的一个应用。如计算： 输入&#39;#&amp;lsquo;代表结束。
算法基本思想 使用两个工作栈，一个存运算符(optr)，另一个存操作数或运算结果(opnd)。
 首先将&amp;rsquo;#&amp;lsquo;push到optr； 依次读入每个字符，若是操作数则进opnd（注意多位数情况），若为运算符则于比较optr栈顶运算符比较优先级完成相应操作。  代码实现 #include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt; using namespace std; int prec(char a, char b) { if (a == &amp;#39;+&amp;#39; || a == &amp;#39;-&amp;#39;) { if (b == &amp;#39;+&amp;#39; || b == &amp;#39;-&amp;#39; || b == &amp;#39;)&amp;#39; || b == &amp;#39;#&amp;#39;) return 1; else return -1; } else if (a == &amp;#39;*&amp;#39; || a == &amp;#39;/&amp;#39;) { if (b == &amp;#39;(&amp;#39;) return -1; else return 1; } else if (a == &amp;#39;(&amp;#39; || a == &amp;#39;#&amp;#39;) { if (a == &amp;#39;(&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;)&amp;#39;) return 0; else if (a == &amp;#39;(&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;#&amp;#39;) return -2; else if (a == &amp;#39;#&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;)&amp;#39;) return -2; else if (a == &amp;#39;#&amp;#39; &amp;amp;&amp;amp; b == &amp;#39;#&amp;#39;) return 0; else return -1; } else if (a == &amp;#39;)&amp;#39;) { if (b == &amp;#39;(&amp;#39;) return -2; else return 1; } return -2; } int Operate(int a, int b, char c) { if (c == &amp;#39;+&amp;#39;) return a + b; else if (c == &amp;#39;-&amp;#39;) return a - b; else if (c == &amp;#39;*&amp;#39;) return a * b; else if (c == &amp;#39;/&amp;#39;) return a / b; else exit(0); } int EvaluateExpression(string s) { stack&amp;lt;char&amp;gt; optr; stack&amp;lt;int&amp;gt; opnd; optr.</description>
    </item>
    
    <item>
      <title>数据结构课后作业</title>
      <link>https://fffzlfk.gitlab.io/2019/09/28/chp1%CE%BA%D2%B5/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/28/chp1%CE%BA%D2%B5/</guid>
      <description>请参考《数据结构题集（C语言版）》严慧敏版
 2.11 typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList; Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 	L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType)); if (!L.elem) exit(OVERFLOW); L.length = 0; L.listsize = LIST_INIT_SIZE; return OK; } Status ListInsert_Sq(SqList &amp;amp;L, int i, ElemType e) { //在顺序线性表L中的第i个位置之前插入新的元素e 	if (i &amp;lt; 1 || i &amp;gt; L.length + 1) return ERROR; if (L.length &amp;gt; L.listsize) { ElemType *newbase = (ElemType*) realloc(L.</description>
    </item>
    
    <item>
      <title>用C语言实现静态链表</title>
      <link>https://fffzlfk.gitlab.io/2019/09/20/c%CA%B5%CC%AC/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/20/c%CA%B5%CC%AC/</guid>
      <description>静态链表 用数组替代指针，数组中的每一项有两个域：data &amp;amp; cur；data用来存放数据，而cur则为游标，相当于链表中的next。 代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define MAXSIZE 1000 #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef int ElemType; typedef struct { ElemType data; int cur; } Component, StaticLinkList[MAXSIZE]; /*将下标为k的空闲结点回收到备用链表*/ void Free_SSL(StaticLinkList space, int k) { space[k].cur = space[0].cur; space[0].cur = k; } int ListLength(StaticLinkList L) { int j = 0; int i = L[MAXSIZE-1].</description>
    </item>
    
    <item>
      <title>简单双向循环链表的表示和实现(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/15/%D1%AD%C4%B1%CA%BE%CA%B5c/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/15/%D1%AD%C4%B1%CA%BE%CA%B5c/</guid>
      <description>双向循环链表 双向链表的每一个节点有两个指针，一个是next（下一个），一个是prep（上一个），其他和单向类似；至于循环双向链表，它的结构为： 代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10  typedef int Status; typedef int ElemType; typedef struct Node { ElemType value; Node* prep; Node* next; } DbLink; DbLink* CreateDbLink(int n) { DbLink *head, *node, *end; head = (DbLink*)malloc(sizeof(DbLink)); if (!head) exit(OVERFLOW); end = head; for (int i = 0; i &amp;lt; n; i++) { node = (DbLink*)malloc(sizeof(DbLink)); if (!</description>
    </item>
    
    <item>
      <title>归并两个非递减排列的线性表(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/12/%E9%B2%A2%C7%B5%DD%BC%D0%B5%D5%A1c/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/12/%E9%B2%A2%C7%B5%DD%BC%D0%B5%D5%A1c/</guid>
      <description>问题 已知线性表La, Lb按非递减有序排列，现需要将La, Lb归并为一个新的非递减有序排列线性表Lc。例如
 La = (3, 5, 8, 11) Lb = (2, 6, 8, 20) 则Lc = (2, 3, 5, 6, 8, 8,11, 20)
 方法 设两个指针pa, pb分别指向La，Lb的首元素，当前应插入Lc的元素为复杂度 显然该算法为线性复杂度，即O(n)；原因是La, Lb为非递减有序排列，故lb中的每个元素不必遍历la中每个元素；而且Lc插入操作实则是通过复制完成的。
代码实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  #define LIST_INIT_SIZE 100 #define LISTINCREMENT 10  typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList; Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 	L.</description>
    </item>
    
    <item>
      <title>求两个简单链表的并集</title>
      <link>https://fffzlfk.gitlab.io/2019/09/07/%C4%BE/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/07/%C4%BE/</guid>
      <description>问题： 给出两个单向链表，求出它们的并集 例如：
 a = [1, 2, 3], b = [2, 3, 4]; 实现InterSect(a, b), 使得a = [1, 2, 3, 4]
 代码实现 #include &amp;lt;stdio.h&amp;gt; typedef struct node { int value; node *next; } LinkList; LinkList* InitList(int n) { LinkList *head, *node, *end; head = new LinkList; end = head; while (n--) { node = new LinkList; scanf(&amp;#34;%d&amp;#34;, &amp;amp;node-&amp;gt;value); end-&amp;gt;next = node; end = node; } end-&amp;gt;next = NULL; return head; } void ShowList(LinkList *h) { while (h-&amp;gt;next !</description>
    </item>
    
    <item>
      <title>线性表的顺序表示和实现(C语言)</title>
      <link>https://fffzlfk.gitlab.io/2019/09/08/%D5%A1%CA%BE%CA%B5c/</link>
      <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/09/08/%D5%A1%CA%BE%CA%B5c/</guid>
      <description>线性表的顺序表示:  线性表的顺序表示指的是用一组地址连续的存储单元依次存储线性表的数据元素。 数据元素的存储位置之间满足如下关系:  一般来说:   #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2
#define LIST_INIT_SIZE 100 #define LISTINCREMENT 10
typedef int Status; typedef int ElemType; typedef struct { ElemType *elem; int length; int listsize; } SqList;
Status InitList_Sq(SqList &amp;amp;L) { //构造一个空线性表 L.elem = (ElemType*)malloc(LIST_INIT_SIZE * sizeof(ElemType)); if (!L.elem) exit(OVERFLOW); L.length = 0; L.listsize = LIST_INIT_SIZE; return OK; }</description>
    </item>
    
  </channel>
</rss>
