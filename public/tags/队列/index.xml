<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>队列 on fffzlfk&#39;s Blog</title>
    <link>https://fffzlfk.gitlab.io/tags/%E9%98%9F%E5%88%97/</link>
    <description>Recent content in 队列 on fffzlfk&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 06 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://fffzlfk.gitlab.io/tags/%E9%98%9F%E5%88%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>魔王语言解释</title>
      <link>https://fffzlfk.gitlab.io/2019/11/06/%C4%A7%D5%AD/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/11/06/%C4%A7%D5%AD/</guid>
      <description>问题描述 有一个魔王总是使用自己的一种非常精练而抽象的语言讲话，没人能听的懂。但他的语言是可以逐步解释成人能懂得语言的，因为他的语言是由以下两种形式的规则由人的语言逐 步抽象上去的：
 （1）α-&amp;gt;β1β2&amp;hellip;βn （2）(θδ1δ2&amp;hellip;δn)-&amp;gt;θδnθδn-1&amp;hellip;θδ1θ   在这两种形式中，从左到右均表示解释；从右到左表示抽象。试写一个魔王解释系统，把他的话解释成人能听懂得话。
 基本要求 用下述两条具体规则和上述规则实现。设大写字母表示魔王语言的词汇；小写字母表示人的语言词汇；希腊字母（a,b1,s,y1等）表示可以用大写或小写字母代换的变量。魔王语言可含人的词汇。
 (1) B-&amp;gt;tAdA (2) A-&amp;gt;sae  测试数据 B（ehnxgz）B 解释成tsaedsaeezegexeneietsaedsae 若将小写字母与汉字建立下表所示的对应关系，则魔王说的话是“天上一个鹅地上一个鹅鹅追鹅赶鹅下鹅蛋鹅恨鹅天上一个鹅地上一个鹅。” t d s a e z g x n i
天 地 上 一个 鹅 追 赶 下 蛋 恨
代码实现 C++ #include &amp;lt;algorithm&amp;gt;#include &amp;lt;iostream&amp;gt;#include &amp;lt;stack&amp;gt;#include &amp;lt;map&amp;gt;using namespace std; void solve(char c, stack&amp;lt;char&amp;gt; &amp;amp;S, string &amp;amp;str) { if (c &amp;gt;= &amp;#39;a&amp;#39; &amp;amp;&amp;amp; c &amp;lt;= &amp;#39;z&amp;#39;) { printf(&amp;#34;%c&amp;#34;, c); str += c; } else if (c == &amp;#39;A&amp;#39;) { printf(&amp;#34;sae&amp;#34;); str += &amp;#34;sae&amp;#34;; } else if (c == &amp;#39;B&amp;#39;) { printf(&amp;#34;tsaedsae&amp;#34;); str += &amp;#34;tsaedsae&amp;#34;; } else if (c == &amp;#39;(&amp;#39;) { stack&amp;lt;char&amp;gt; SS; S.</description>
    </item>
    
    <item>
      <title>循环队列</title>
      <link>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</link>
      <pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fffzlfk.gitlab.io/2019/10/10/%D1%AD/</guid>
      <description>问题描述 如果希望循环队列的每一个元素都能用到，需设置一个标志域tag，用tag的0或1来区分是否满队列。试写出这种结构的算法，并从时间和空间分析这两种这两种方法的适用范围。
带标志域（tag）的算法实现 #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2  typedef int Status; typedef int ElemType; #define MAXSIZE 100 typedef struct { ElemType *base; int front; int rear; int tag; } SqQueue; Status InitQueue(SqQueue &amp;amp;Q) { Q.base = (ElemType*) malloc(MAXSIZE * sizeof(ElemType)); if (!Q.base) exit(OVERFLOW); Q.front = Q.rear = 0; Q.tag = 0; return OK; } int QueueLength(SqQueue Q) { return (Q.</description>
    </item>
    
  </channel>
</rss>
